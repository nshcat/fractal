cmake_minimum_required(VERSION 3.9)
project(fractal)


## === BUILD OPTIONS ===
##
set(DISTRIBUTE 		OFF		CACHE BOOL 		"Create distribution folder and copy dependencies (msys2 only)"	)
set(CLANG_TIDY 		OFF		CACHE BOOL 		"Analyze source with clang-tidy"								)
set(USE_LTO		 	OFF		CACHE BOOL 		"Utilize Link-Time-Optimization"								)
## =====================


# Setup module path
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)

# Import required CMake modules
include(Color)

# Show current build options to user
macro(print_switch sw desc)
	if(${sw})
		message("${BoldWhite} ${desc}${Green}ON${ColourReset}")
	else()
		message("${BoldWhite} ${desc}${Red}OFF${ColourReset}")
	endif()
endmacro()

macro(print_str val desc)
	message("${BoldWhite} ${desc}${ColourReset}${val}")
endmacro()

message("${BoldWhite}Build settings =================================${ColourReset}")
print_switch(${CLANG_TIDY} "CLANG_TIDY:      ")
print_switch(${USE_LTO} "USE_LTO:         ")

# The distribute switch is only useful when using mingw
if(MINGW)
	print_switch(${DISTRIBUTE} "DISTRIBUTE:      ")
endif()
message("${BoldWhite}================================================${ColourReset}")
#


# Search for OpenGL
find_package(OpenGL REQUIRED)

# Search for Boost
# Note that for header-only libraries like boost::property_tree,
# no component has to be specified here
find_package(Boost 1.56 REQUIRED COMPONENTS filesystem thread)

# Search for clang-tidy if enabled by user
if(CLANG_TIDY)
	find_program(
  		CLANG_TIDY_EXE
  		NAMES "clang-tidy"
  		DOC "Path to clang-tidy executable"
  	)
  	
  	# Check if clang-tidy was actually found
  	if(NOT CLANG_TIDY_EXE)
  		message(STATUS "/!\ clang-tidy not found!")
 	else()
 		message(STATUS "clang-tidy found: ${CLANG_TIDY_EXE}")
 		
 		# Create clang-tidy command
 		set(DO_CLANG_TIDY "${CLANG_TIDY_EXE}" "-checks=*,-readability-braces-around-statements,-google-readability-braces-around-statements,-google-readability-todo,-clang-analyzer-alpha.*")
 	endif()
endif()

# Disable glfw examples and tests
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "bla")
set(GLFW_BUILD_TESTS OFF CACHE BOOL "bla")
set(GLFW_BUILD_DOCS OFF CACHE BOOL "bla")
set(GLFW_INSTALL OFF CACHE BOOL "bla")

# Add openGL support libraries
add_subdirectory(glfw)
add_subdirectory(glxw)
add_subdirectory(ut)
add_subdirectory(cl)
add_subdirectory(log)
add_subdirectory(nuklear_cmake)

# Source files
file(GLOB SOURCE_FILES src/*.cxx)

# Headers
file(GLOB HEADER_FILES include/*.hxx)

# Define target as executable
add_executable(fractal ${SOURCE_FILES} ${HEADER_FILES})

# Own headers
target_include_directories(fractal PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

# GLFW headers
target_include_directories(fractal PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glfw/include)

# GLM headers
target_include_directories(fractal PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glm)

# GLXW headers. They will be generated by cmake and are thus placed in the binary dir.
target_include_directories(fractal PRIVATE ${CMAKE_BINARY_DIR}/glxw/include)

# Boost headers
target_include_directories(fractal PRIVATE ${Boost_INCLUDE_DIRS})

# Link dependencies
target_link_libraries(	fractal glfw glxw
						${NUKLEAR_LIBRARIES} ${NUKLEAR_GLFW_OPENGL3_LIBRARIES}
						${GLFW_LIBRARIES} ${GLXW_LIBRARY} ${OPENGL_LIBRARY}
						${LIBUT_LIBRARIES} ${LIBLOG_LIBRARIES} Boost::filesystem
						Boost::thread ${LIBCL_LIBRARIES})	
						
# Copy assets to output path
add_custom_command(
	TARGET fractal
	POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/assets $<TARGET_FILE_DIR:fractal>/assets
)

# Require support for at least C++17.
set_property(TARGET fractal PROPERTY CXX_STANDARD 17)
set_property(TARGET fractal PROPERTY CXX_STANDARD_REQUIRED ON)	

# Attach clang-tidy operation to target if requested by user
if(CLANG_TIDY)
	set_property(TARGET fractal PROPERTY CXX_CLANG_TIDY "${DO_CLANG_TIDY}")
endif()

# Bundle dependencies on mingw
if(MINGW AND DISTRIBUTE)
	add_custom_command(
		TARGET fractal
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E make_directory "distrib"
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_SOURCE_DIR}/mingw-bundledlls/mingw-bundledlls ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_BINARY_DIR}/fractal.exe ${CMAKE_BINARY_DIR}/distrib/fractal.exe
		COMMAND ${CMAKE_COMMAND} -E copy_directory  ${CMAKE_BINARY_DIR}/assets ${CMAKE_BINARY_DIR}/distrib/assets
		COMMAND ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls --copy "${CMAKE_BINARY_DIR}/distrib/fractal.exe"
		COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
	)
endif()

# Enable LTO if requested by user
if(USE_LTO)
	# Check for LTO support
	include(CheckIPOSupported)
	check_ipo_supported()
	
	# Enable it for fractal. The used libraries do not really need it.
	set_target_properties(fractal PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)

	# Append special linker flags. This both sets the linker to gold (which is required to use LTO) and
	# enable caching for faster recompiles.
	set(LTO_FLAGS "-fuse-ld=gold -Wl,--no-threads,--plugin-opt,cache-dir=${PROJECT_BINARY_DIR}/lto.cache")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LTO_FLAGS}")
endif()

